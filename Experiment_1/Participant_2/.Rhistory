head(iris,3)
iris.data = iris[, grep("Sepal|Petal", colnames(iris))]
iris.data
iris
iris.labels
iris.labels = iris[, "Species"]
library(umap) # umap package needed
umap.defaults
# for a custom configuration of parameters
custom.config = umap.defaults
custom.config$random_state = 123
# computation of the mapping
iris.umap = umap(iris.data, custom.config) # custom configuration is optional
iris.umap
head(iris.umap$layout, 3) # a matrix with coordinates
source("plot.iris.R")
plot.iris(iris.umap, iris.labels)
# create a second synthetic dataset
iris.wnoise = iris.data + matrix(rnorm(150*40, 0, 0.1), ncol=4)
colnames(iris.wnoise) = colnames(iris.data)
head(iris.wnoise,3)
# project the new dataset onto the iris.umap space
iris.wnoise.umap = predict(iris.umap, iris.wnoise)
plot.iris(iris.wnoise.umap, iris.labels, add=T, pch=4, legend.suffix=" (with noise)")
# predict in batch, display first item
predict(iris.umap, iris.wnoise)[1, , drop=FALSE]
iris.wnoise.umap
library(ggplot2)
euromat = as.matrix(eurodist)
euromat[1:5, 1:5]
mds <- cmdscale(eurodist, k = 2)
mdsd <- as.data.frame(mds)
ggplot(data = mdsd) +
geom_point(mapping = aes(x = V1, y = V2)) +
ggrepel::geom_label_repel (
aes(x = V1, y = V2, label = row.names(mdsd))
)
# from http://www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/122-multidimensional-scaling-essentials-algorithms-and-r-code/
data("swiss")
head(swiss)
# classical MDS
library(magrittr)
library(dplyr)
library(ggpubr)
### Compute classical (metric) MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble(.name_repair = "unique")
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
size = 1,
repel = TRUE)
# K-means clustering
clust <- kmeans(mds, 3)$cluster %>%
as.factor()
mds <- mds %>%
mutate(groups = clust)
# Plot and color by groups
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
color = "groups",
palette = "jco",
size = 1,
ellipse = TRUE,
ellipse.type = "convex",
repel = TRUE)
### Compute Kruskal non-metric MDS
library(MASS)
mds <- swiss %>%
dist() %>%
isoMDS() %>%
.$points %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
size = 1,
repel = TRUE)
###  Compute Sammon non-metric MDS
library(MASS)
mds <- swiss %>%
dist() %>%
sammon() %>%
.$points %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
size = 1,
repel = TRUE)
### Visualizing a correlation matrix using Multidimensional Scaling
res.cor <- cor(mtcars, method = "spearman")
mds.cor <- (1 - res.cor) %>%
cmdscale() %>%
as_tibble()
colnames(mds.cor) <- c("Dim.1", "Dim.2")
ggscatter(mds.cor, x = "Dim.1", y = "Dim.2",
size = 1,
label = colnames(res.cor),
repel = TRUE)
library(factoextra) # for fviz_cluster by Alboukadel Kassambara
# simulated example with two synthesized clusters
set.seed(2) # for the sake of reproducibility
x = matrix(rnorm(50*2), ncol=2)
dim(x)
plot(x)
x[1:25, 1]= x[1:25, 1] + 3
x[1:25, 2]= x[1:25, 2] - 4
plot(x)
# k-means clustering with k=2
km.out = kmeans(x, 2, nstart=20) # 20 initializations
km.out$cluster
plot(x, col=(km.out$cluster+1),
main ="K-Means Clustering Results with K=2",
xlab="", ylab="", pch =20, cex =2)
# https://www.datanovia.com/en/lessons/k-means-clustering-in-r-algorith-and-practical-examples/
fviz_cluster(km.out, data.frame(x), ellipse.type = "norm")
?fviz_cluster
# k-means clustering with k=3
set.seed(4)
km.out = kmeans(x, 3, nstart=20)
km.out$cluster
plot(x, col=(km.out$cluster+1),
main ="K-Means Clustering Results with K=3",
xlab="", ylab="", pch =20, cex =2)
km.out
fviz_cluster(km.out, data.frame(x), ellipse.type = "norm")
# compare 1 vs 20 initializations
set.seed(7)
km.out = kmeans(x, 3, nstart=1)
km.out$tot.withinss # total within-cluster sum of squares
km.out=kmeans(x, 3, nstart=20)
km.out$tot.withinss
# hierarchical clustering, three kinds of linkage
hc.complete=hclust(dist(x), method="complete")
hc.average=hclust(dist(x), method="average")
hc.single=hclust(dist(x), method="single")
par(mfrow=c(1,3))
plot(hc.complete, main="Complete Linkage", xlab="", ylab="", cex=.9)
plot(hc.average, main="Average Linkage", xlab="", ylab="", cex=.9)
plot(hc.single, main="Single Linkage", xlab="", ylab="", cex=.9)
cutree(hc.complete, 2) # labels for 2 clusters
cutree(hc.average, 2)
cutree(hc.single, 2)
xsc=scale(x) # scaled version of data
par(mfrow=c(1,1))
plot(hclust(dist(xsc), method="complete"),
main="Hierarchical clustering with Scaled Features")
hc.cut <- hcut(xsc, k=3, hc_method = "complete")
fviz_dend(hc.cut, show_labels = FALSE, rect = TRUE)
hc.cut <- hcut(xsc, k=4, hc_method = "complete")
fviz_dend(hc.cut, show_labels = FALSE, rect = TRUE)
fviz_cluster(hc.cut, ellipse.type = "convex")
heatmap(xsc, scale="none")
hc.cut
iris.scaled <- scale(iris[, -5])
hc.cut <- hcut(iris.scaled, k = 3, hc_method = "complete")
fviz_dend(hc.cut, show_labels = FALSE, rect = TRUE)
fviz_cluster(hc.cut, ellipse.type = "convex")
head(iris.scaled)
head(xsc)
names(xsc)
names(iris)
names(x)
?names
names(xsc)<- ["xsc1","xsc2"]
names(xsc)[:]<- ["xsc1","xsc2"]
names(xsc)<- c("xsc1","xsc2")
hc.cut <- hcut(xsc, k=4, hc_method = "complete")
fviz_dend(hc.cut, show_labels = FALSE, rect = TRUE)
fviz_cluster(hc.cut, ellipse.type = "convex")
hc.cut
head(xsc)
colnames(xsc) <- c("xsc1","xsc2")
hc.cut <- hcut(xsc, k=4, hc_method = "complete")
fviz_dend(hc.cut, show_labels = FALSE, rect = TRUE)
fviz_cluster(hc.cut, ellipse.type = "convex")
# hierarchical clustering with correlation distance
x=matrix(rnorm(30*3), ncol=3) # synthetic data with 3 features
dd=as.dist(1-cor(t(x)))
plot(hclust(dd, method="complete"),
main="Hierarchical clustering Complete linkage - Correlation-based distance",
xlab="", ylab="")
# cancer cell line microarray data:
# 6,830 gene expression measurements on 64 cancer cell lines
library(ISLR)
nci.labs=NCI60$labs
nci.data=NCI60$data
dim(nci.data)
nci.labs[1:4]
table(nci.labs)
?table
pr.out=prcomp(nci.data, scale=TRUE)
Cols=function(vec){ # assign a color to each of 64 lines
# based on cancer type
cols=rainbow(length(unique(vec)))
return(cols[as.numeric(as.factor(vec))])
}
par(mfrow=c(1,2))
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19,
xlab="Z1", ylab="Z2")
plot(pr.out$x[,c(1,3)], col=Cols(nci.labs), pch=19,
xlab="Z1", ylab="Z3")
summary(pr.out) # variance explained per component
pve=100*pr.out$sdev^2/sum(pr.out$sdev^2)
par(mfrow=c(1,2))
plot(pve, type="o", ylab="PVE", xlab="Principal Component",
col="blue") # elbow at component 7 (40% variance explained)
plot(cumsum(pve), type="o", ylab="CumulativePVE",
xlab="Principal Component",
col="brown3")
sd.data=scale(nci.data) # scale data
par(mfrow=c(1,3))
data.dist=dist(sd.data)
plot(hclust(data.dist), labels=nci.labs, main="Complete Linkage",
xlab="", sub="", ylab="")
plot(hclust(data.dist, method="average"),labels=nci.labs, main="Average Linkage",
xlab="", sub="", ylab="")
plot(hclust(data.dist, method="single"), labels=nci.labs, main="Single Linkage",
xlab="", sub="", ylab="")
hc.out=hclust(dist(sd.data))
hc.clusters=cutree(hc.out,4)
table(hc.clusters,nci.labs) # all leukemia cell lines fall in cluster 3
par(mfrow=c(1,1))
plot(hc.out, labels=nci.labs)
abline(h=139, col="red") # the cut line
hc.out
# how does this compare with K-means clustering with k=4?
set.seed(2)
km.out=kmeans(sd.data, 4, nstart=20)
km.clusters=km.out$cluster
table(km.clusters,hc.clusters) # cluster 2 in K-means
# equal to cluster 3 in hierarchical
# Clustering on the principal components
# (denoising the data)
hc.out=hclust(dist(pr.out$x[,1:5]))
plot(hc.out, labels=nci.labs, main="Hierarchical Clustering
# on First Five Score Vectors")
# on First Five Score Vectors")
table(cutree(hc.out,4), nci.labs)
library(ggplot2)
euromat = as.matrix(eurodist)
euromat[1:5, 1:5]
mds <- cmdscale(eurodist, k = 2)
mdsd <- as.data.frame(mds)
ggplot(data = mdsd) +
geom_point(mapping = aes(x = V1, y = V2)) +
ggrepel::geom_label_repel (
aes(x = V1, y = V2, label = row.names(mdsd))
)
# from http://www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/122-multidimensional-scaling-essentials-algorithms-and-r-code/
data("swiss")
head(swiss)
# classical MDS
library(magrittr)
library(dplyr)
library(ggpubr)
### Compute classical (metric) MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble(.name_repair = "unique")
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
size = 1,
repel = TRUE)
ggscatter(swiss,
label = rownames(swiss),
size = 1,
repel = TRUE)
head(swiss)
ggscatter(swiss, x = "Fertility", y = "Agriculture"
label = rownames(swiss),
ggscatter(swiss, x = "Fertility", y = "Agriculture"
label = rownames(swiss),
ggscatter(swiss, x = "Fertility", y = "Agriculture",
label = rownames(swiss),
size = 1,
repel = TRUE)
pairs(swiss)
### Compute classical (metric) MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble(.name_repair = "unique")
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
size = 1,
repel = TRUE)
pairs(swiss) # PLOMS
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
size = 1,
repel = TRUE)
# K-means clustering
clust <- kmeans(mds, 3)$cluster %>%
as.factor()
mds <- mds %>%
mutate(groups = clust)
# Plot and color by groups
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
color = "groups",
palette = "jco",
size = 1,
ellipse = TRUE,
ellipse.type = "convex",
repel = TRUE)
### Compute Kruskal non-metric MDS
library(MASS)
mds <- swiss %>%
dist() %>%
isoMDS() %>%
.$points %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
size = 1,
repel = TRUE)
###  Compute Sammon non-metric MDS
library(MASS)
mds <- swiss %>%
dist() %>%
sammon() %>%
.$points %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
size = 1,
repel = TRUE)
### Visualizing a correlation matrix using Multidimensional Scaling
res.cor <- cor(mtcars, method = "spearman")
mds.cor <- (1 - res.cor) %>%
cmdscale() %>%
as_tibble()
colnames(mds.cor) <- c("Dim.1", "Dim.2")
ggscatter(mds.cor, x = "Dim.1", y = "Dim.2",
size = 1,
label = colnames(res.cor),
repel = TRUE)
head(iris,3)
iris.data = iris[, grep("Sepal|Petal", colnames(iris))]
iris.labels = iris[, "Species"]
library(umap) # umap package needed
# for a custom configuration of parameters
custom.config = umap.defaults
custom.config$random_state = 123
# computation of the mapping
iris.umap = umap(iris.data, custom.config) # custom configuration is optional
iris.umap
head(iris.umap$layout, 3) # a matrix with coordinates
source("plot.iris.R")
plot.iris(iris.umap, iris.labels)
# create a second synthetic dataset
iris.wnoise = iris.data + matrix(rnorm(150*40, 0, 0.1), ncol=4)
colnames(iris.wnoise) = colnames(iris.data)
head(iris.wnoise,3)
# project the new dataset onto the iris.umap space
iris.wnoise.umap = predict(iris.umap, iris.wnoise)
plot.iris(iris.wnoise.umap, iris.labels, add=T, pch=4, legend.suffix=" (with noise)")
# predict in batch, display first item
predict(iris.umap, iris.wnoise)[1, , drop=FALSE]
?predict
iris.umap
iris.layout
iris.umap$layaout
iris.umap$layout
iris.layout
iris.umap
iris.umap$data
iris.umap
iris.knn
iris.umap$knn
iris.umap$config
library(ggplot2)
euromat = as.matrix(eurodist)
euromat[1:5, 1:5]
mds = cmdscale(eurodist, k = 2)
mdsd = as.data.frame(mds)
ggplot(data = mdsd) +
geom_point(mapping = aes(x = V1, y = V2)) +
ggrepel::geom_label_repel (
aes(x = V1, y = V2, label = row.names(mdsd))
)
library(sound)
library(help="sound")
s2 <- loadSample("saxC3.wav")
pwd
cwd
getwd
getwd()
setwd("../ex_2022_12_06/")
ls
getwd()
s2 <- loadSample("saxC3.wav")
play(s2)
?setWavPlayer
findWavPlayer()
setWavPlayer("play")
play(s2)
play(s2)
play(pitch(s2,2)) # transposition by 1 semitone
print(s2)
plot(s2)
sig <- Sine(500, 3, rate=8000) # pure sine wave
play(sig)
library("signal")
library(help="signal")
sp <- specgram(sig$sound,64*8000/1000,8000,64*8000/1000)
plot(sp)
plot(sp$f,abs(sp$S)[,5],type="l",xlab="frequency",ylab="intensity")
sig <- 0.75 * Sine(500, 3, rate=8000) + 0.25 * Sine(1000, 3, rate=8000) # two sinewaves
play(sig)
sp <- specgram(sig$sound,64*8000/1000,8000,64*8000/1000)
plot(sp)
plot(sp$f,abs(sp$S)[,5],type="l",xlab="frequency",ylab="intensity")
# adding noise
sig <- 0.75 * Sine(500, 3, rate=8000) + 0.25 * Noise(3, rate=8000)
play(sig)
sp <- specgram(sig$sound,64*8000/1000,8000,64*8000/1000) # fft length, rate, hanning window length
plot(sp)
plot(sp$f,abs(sp$S)[,5],type="l",xlab="frequency",ylab="intensity")
# Jay-Z
download.file("https://github.com/unixjazz/freezam/raw/master/jay-z.wav", "jay-z.wav")
class(jz)
jz <- loadSample("jay-z.wav")
class(jz)
class(jz$sound)
plot(jz[(53*8000+1):(57*8000)])
jzspec <- specgram(jz$sound[(50*8000+1):(65*8000)],64*8000/1000,8000,64*8000/1000) # 64ms-window
typeof(jzspec$S)
class(jzspec)
methods(class = "specgram")
plot(jzspec)
vir <- viridis::scale_fill_viridis(discrete=TRUE) # spectrogram in dB with viridis scale
image(jzspec$t,jzspec$f,t(10*log10(abs(jzspec$S))),col=vir$palette(100),xlab="time",ylab="frequency")
play(jz[(53*8000+1):(57*8000)])
setwd("~/Research/DrawRhythm/TickTack/Participant_1")
library(tidyverse)
scale = 0.5625
ghost <- read.csv("../Data/usa_2013.csv")
traj <- read.csv("path_follow_161744.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", alpha=0.1)
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
traj <- read.csv("path_follow_16180.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
traj <- read.csv("path_follow_16182.csv")
View(traj)
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
traj <- read.csv("path_follow_161816.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
traj <- read.csv("path_follow_291735.csv")
View(traj)
head(traj)
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
setwd("~/Research/DrawRhythm/TickTack/Participant_3")
library(tidyverse)
scale = 0.5625
ghost <- read.csv("../Data/usa_2013.csv")
traj <- read.csv("path_follow_291735.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
traj <- read.csv("path_follow_291752.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
setwd("~/Research/DrawRhythm/TickTack/Participant_4")
library(tidyverse)
scale = 0.5625
ghost <- read.csv("../Data/usa_2013.csv")
traj <- read.csv("path_follow_301815.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
head(traj)
traj <- read.csv("path_follow_301830.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
setwd("~/Research/DrawRhythm/TickTack/Participant_2")
traj <- read.csv("path_follow_221816.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
traj <- read.csv("path_follow_22182.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
setwd("~/Research/DrawRhythm/TickTack/Participant_2")
library(tidyverse)
scale = 0.5625
ghost <- read.csv("../Data/usa_2013.csv")
traj <- read.csv("path_follow_22182.csv")
#ggplot(data=ghost, mapping=aes(x=x,y=y)) + geom_point(color="gray") + geom_point(data=traj/scale, color="red")
ggplot(data=traj) + geom_point(mapping=aes(x=x,y=y), color="gray") + geom_point(mapping=aes(x=xGhost,y=yGhost), color="red", shape=".")
